Вероятнее всего, мы будем работать над вычислением функций на интервале.
Понадобится оценка погрешностей. Можно считать погрешность явно. Но нужно выяснить точность типа double в С#, чтобы не попасть в ситуацию, когда нужна большая точность, чем способен предоставить тип данных.
?Нужен какой-то анализ сходимости и выражение для погрешностей, чтобы их считать.
Значения должны вычисляться во всех точках интервала.

Текс.
Для каждой функции, таким образом, нужны:

Реализация, которая получает на вход количество членов ряда.
Реализация, которая принимает максимальную допустимую погрешность. (при условии, что определён характер сходимости)

Файл типа .csv, где хранится информация о погрешностях.
График зависимости погрешности от количества членов ряда.
График зависимости погрешности от точки интервала, при заданном количестве точек интервала.

Каждый студент пишет собственный класс в пределах общего namespace
Чтобы не плодить экземпляры класса, методы можно создавать как static.
Нужен файл "заголовочный" - в составе библиотеки, который реализует 2 метода для каждой аппроксимации.
Нужен файл "тестирующий" - в составе проекта, который строит результаты численного эксперимента для нужного метода.
Нужны файлы "результирующие" - с протоколами численных экспериментов

Дополнительно - нужны файлы с графиками, отражающими характер численных экспериментов. Здесь по сути 2 варианта, поскольку функции наши элементарные и действительнозначные. Либо для каждой из точек мы рисуем двумерный график, по оси абсцисс которого количество членов ряда, по оси ординат - погрешность. Либо рисуем трёхмерный график - совокупный для всех точек в области определения.

Протоколы численных экспериментов можно хранить в файле .log
Файл .log совпадает с именем функции
Туда заносится вся информация из описания, начиная с символов //
После этого туда заносится заголовок вида
Colname1;Colname2;Colname3;
И сами данные, разделённые символом ;
Например: точка, где проведена проверка; погрешность;

Либо точка проверки; кол-во итераций; погрешность

Правильно ли я понимаю, что для каждой функции нужно 2 реализации: для double и для float?
А ещё по 2 реализации для каждой функции из аппроксимаций: одна имеет входным параметром кол-во итераций, другая - допустимую точность. Функция с допустимой точностью содержит ругалку на бесконечные циклы, когда требуемая погрешность не может быть достигнута.

Или использовать процедуру из тестирующего модуля для этой цели? Пока непонятно.

1. OpenRepository или RecentRepositories
2. Справа от Commit стрелка, надо выбрать fetch. Вы выясните, что сделали коллеги и не потеряете работу
3. В дереве процессов появятся последние коммиты. Выкачивайте их, нажав chekout branch (по райтклику)
4. Работайте
5. Создайте резервную копию ваших файлов.  (изменения могли потереться)
5. После завершения работы - коммит.
6. Откроется новое окно. В нём нужно stage те изменения и только те изменения, которые нужны. Про существование кнопки stage all лучше забыть
7. Описываете изменения, которые вы сделали
8. Коммит
9. Коммит и пуш

Всё.